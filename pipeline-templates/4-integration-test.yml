---
AWSTemplateFormatVersion: '2010-09-09'

Description: Pipeline to deploy Lambda function

Parameters:
  ProjectName:
    Type: String

Resources:
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action: 'iam:PassRole'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 's3:PutObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetObject'
                  - 's3:GetBucketVersioning'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: !Sub '${ArtifactBucket.Arn}/*'
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              -
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - cloudformation:DescribeStacks
                  - lambda:invokeFunction
                  - codepipeline:PutJob*Result
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudformation.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-*
                Action:
                  - cloudformation:CreateChangeSet
              -
                Effect: Allow
                Resource: !Sub '${ArtifactBucket.Arn}/*'
                Action:
                  - s3:GetObject
                  - s3:GetObject*
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:GetFunctionConfiguration
                  - lambda:AddPermission
                  - lambda:RemovePermission
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - apigateway:*
              -
                Effect: Allow
                Resource: '*'
                Action:
                  - iam:Get*
                  - iam:List*
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:UpdateAssumeRolePolicy
                  - iam:PutRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
  TriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: events.amazonaws.com
      Policies:
        -
          PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Resource: '*'
                Action: codepipeline:StartPipelineExecution
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  Repository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref ProjectName
  Trigger:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !GetAtt Repository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      State: ENABLED
      Targets:
        -
          Id: pipeline
          Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          RoleArn: !GetAtt TriggerRole.Arn
  TestProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.unittest.yml
      TimeoutInMinutes: 5
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          -
            Type: PLAINTEXT
            Name: S3_BUCKET
            Value: !Ref ArtifactBucket
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 5
  IntegrationTest:
    Type: AWS::Lambda::Function
    Properties:
      Description: Runs integration test on Testing Stack
      Role: !GetAtt FunctionRole.Arn
      Timeout: 90 # seconds
      MemorySize: 128 # MB
      Runtime: python3.6
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          from boto3 import client
          from urllib.parse import urlencode
          from urllib.request import urlopen

          cloudformation_client = client('cloudformation')
          codepipeline_client = client('codepipeline')


          def success(job_id):
              print('SUCCESS')
              codepipeline_client.put_job_success_result(
                  jobId=job_id,
              )

          def failure(job_id, message, type='JobFailed'):
              print('FAILURE: {}'.format(message))
              codepipeline_client.put_job_failure_result(
                  jobId=job_id,
                  failureDetails={
                      'type': type,
                      'message': message,
                  }
              )

          def lambda_handler(event, context):
              job = event['CodePipeline.job']
              id = job['id']
              stack_name = job['data']['actionConfiguration']['configuration']['UserParameters']

              print('Stack name: {}'.format(stack_name))
              print('Job ID: {}'.format(id))

              response = cloudformation_client.describe_stacks(StackName=stack_name)
              url = response['Stacks'][0]['Outputs'][0]['OutputValue']

              url = '{}?{}'.format(url, urlencode({
                  'a': 7,
                  'b': 35,
              }))

              print('URL: {}'.format(url))

              response = urlopen(url)
              result = int(response.read())

              if result == 42:
                  success(job['id'])
              else:
                  failure(job['id'], 'Lambda function gave unexpected result')

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref 'AWS::StackName'
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      RestartExecutionOnUpdate: True
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: Repository
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt Repository.Name
                BranchName: master
                PollForSourceChanges: False
              OutputArtifacts:
                - Name: SourceArtifact
        -
          Name: UnitTest
          Actions:
            -
              Name: Test
              ActionTypeId:
                Category: Test
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref TestProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: TestArtifact
        -
          Name: Build
          Actions:
            -
              Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildProject
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        -
          Name: IntegrationTest
          Actions:
            -
              Name: CreateTestStack
              RunOrder: 1
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub test-${ProjectName}
                RoleArn: !GetAtt CloudFormationRole.Arn
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: 'BuildArtifact::package.yml'
              InputArtifacts:
                - Name: BuildArtifact
            -
              Name: ExecuteLambda
              RunOrder: 2
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref IntegrationTest
                UserParameters: !Sub test-${ProjectName}
            -
              Name: DeleteTestStack
              RunOrder: 3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: DELETE_ONLY
                StackName: !Sub test-${ProjectName}
                RoleArn: !GetAtt CloudFormationRole.Arn
        -
          Name: Deploy
          Actions:
            -
              Name: Production
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref ProjectName
                RoleArn: !GetAtt CloudFormationRole.Arn
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: 'BuildArtifact::package.yml'
              InputArtifacts:
                - Name: BuildArtifact
